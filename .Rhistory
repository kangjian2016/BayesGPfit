dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=10L,progress_bar = TRUE)
reg_fit_1 = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
reg_1 = mean((reg_fit_1$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
plot(GP.plot.curve(reg_fit_1,main="Posterior mean estimates (Regular 1)"),split=c(1,1,2,2),more=TRUE)
plot(GP.plot.curve(curve,main="True curve"),split=c(1,2,2,2),more=TRUE)
plot(GP.plot.curve(fast_fit,main="Posterior mean estimates (fast)"),split=c(2,2,2,2),more=TRUE)
plot(GP.plot.curve(reg_fit,main="Posterior mean estimates (Regular)"),split=c(2,1,2,2))
rm(list=ls(all=TRUE))
library(BayesGPfit)
library(lattice)
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
plot(GP.plot.curve(curve,main="True curve"),split=c(1,2,2,2),more=TRUE)
plot(GP.plot.curve(fast_fit,main="Posterior mean estimates (fast)"),split=c(2,2,2,2),more=TRUE)
plot(GP.plot.curve(reg_fit,main="Posterior mean estimates (Regular)"),split=c(2,1,2,2))
library(BayesGPfit)
library(lattice)
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=1.0,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
plot(GP.plot.curve(curve,main="True curve"),split=c(1,2,2,2),more=TRUE)
plot(GP.plot.curve(fast_fit,main="Posterior mean estimates (fast)"),split=c(2,2,2,2),more=TRUE)
plot(GP.plot.curve(reg_fit,main="Posterior mean estimates (Regular)"),split=c(2,1,2,2))
library(BayesGPfit)
library(BayesGPfit)
source('~/Dropbox/Umich/People/jiankang/Rlib/BayesGPfit/R/fastGPfit.R')
rm(list=ls(all=TRUE))
library(BayesGPfit)
?GP.summary
library(BayesGPfit)
library(BayesGPfit)
library(BayesGPfit)
library(BayesGPfit)
?GP.summary
library(BayesGPfit)
library(BayesGPfit)
sum_fast_fit = GP.summary(fast_fit)
source('~/Dropbox/Umich/People/jiankang/Rlib/fastGPfit_examples.R', echo=TRUE)
sum_fast_fit = GP.summary(fast_fit)
sum_reg_fit = GP.summary(reg_fit)
sum_fast_fit = GP.summary(fast_fit)
sum_reg_fit = GP.summary(reg_fit)
plot(GP.plot.curve(sum_fast_fit$lci,main="LCL curve"),split=c(1,3,1,3),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$lci,main="LCL curve"),split=c(3,1,3,1),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$lci,main="LCL curve"),split=c(3,1,3,1),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$mean,main="mean curve"),split=c(3,2,3,1),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$uci,main="UCL curve"),split=c(3,3,3,1))
plot(GP.plot.curve(sum_fast_fit$uci,main="UCL curve"),split=c(3,1,3,1))
plot(GP.plot.curve(sum_fast_fit$lci,main="LCL curve"),split=c(1,1,3,1),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$mean,main="mean curve"),split=c(2,1,3,1),more=TRUE)
plot(GP.plot.curve(sum_fast_fit$uci,main="UCL curve"),split=c(3,1,3,1))
sum_fast_fit$lci
sum_fast_fit$lci$f
library(BayesGPfit)
curves = list(mean = sum_fast_fit$mean,
lcl = sum_fast_fit$lcl,
ucl = sum_fast_fit$ucl)
GP.plot.curves(curves)
library(BayesGPfit)
curves = list(mean = sum_fast_fit$mean,
lcl = sum_fast_fit$lcl,
ucl = sum_fast_fit$ucl)
GP.plot.curves(curves)
names(curves)
names(curves[[1]])
curves[[1]]$x
ncol(curves[[1]]$x)
library(BayesGPfit)
library(BayesGPfit)
curves = list(mean = sum_fast_fit$mean,
lcl = sum_fast_fit$lcl,
ucl = sum_fast_fit$ucl)
GP.plot.curves(curves)
length(curves)
?levelplot
if(is.null(col.regions))
col.regions = GP.create.cols()
col.regions = GP.create.cols()
cut = length(col.regions)-1L
xlim = range(curves[[1]]$x[,1])
ylim = range(curves[[1]]$x[,2])
if(is.null(ylab))
ylab = "x2"
xlab = "x1"
ylab = "x2"
nms = names(curves)
if(is.null(nms)){
nms = 1:length(curves)
}
x1 = NULL
x2 = NULL
group = NULL
f = NULL
for(i in 1:length(curves)){
x1 = c(x1, curves[[i]]$x[,1])
x2 = c(x2, curves[[i]]$x[,2])
group = c(group,  rep(nms[i],length=length(curves[[i]]$x[,1])))
f = c(f,  curves[[i]]$f)
}
levelplot(f~x1+x2 | group,
xlab=xlab,ylab=ylab,xlim=xlim,
ylim=ylim,col.regions = col.regions,cut=cut,...)
levelplot(f~x1+x2 | group,
xlab=xlab,ylab=ylab,xlim=xlim,
ylim=ylim,col.regions = col.regions,cut=cut)
f
length(f)
i
x1 = NULL
x2 = NULL
group = NULL
f = NULL
length(curves[[i]]$x[,1])
curves[[i]]$x[,1]
i
curves[[i]]
curves[[3]]
names(curves)
names(sum_fast_fit)
curves = list(mean = sum_fast_fit$mean,
lci = sum_fast_fit$lci,
uci = sum_fast_fit$uci)
GP.plot.curves(curves)
plot(GP.plot.curves(curves),main="Summary of posterior distribution")
plot(GP.plot.curves(curves,layout=c(1,3)),main="Summary of posterior distribution")
plot(GP.plot.curves(curves,layout=c(3,1)),main="Summary of posterior distribution")
GP.plot.curves(curves,layout=c(3,1))
curves = list(mean_fast = sum_fast_fit$mean,
lci_fast = sum_fast_fit$lci,
uci_fast = sum_fast_fit$uci,
mean_reg = sum_reg_fit$mean,
lci_fast = sum_reg_fit$lci,
uci_fast = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
sum_reg_fit = GP.summary(reg_fit)
curves = list(mean_fast = sum_fast_fit$mean,
lci_fast = sum_fast_fit$lci,
uci_fast = sum_fast_fit$uci,
mean_reg = sum_reg_fit$mean,
lci_fast = sum_reg_fit$lci,
uci_fast = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
names(sum_reg_fit)
sum_reg_fit$lci
curves = list(mean_fast = sum_fast_fit$mean,
lci_fast = sum_fast_fit$lci,
uci_fast = sum_fast_fit$uci,
mean_reg = sum_reg_fit$mean,
lci_reg = sum_reg_fit$lci,
uci_reg = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
curves = list(mean_fast = sum_fast_fit$mean,
mean_reg = sum_reg_fit$mean,
lci_fast = sum_fast_fit$lci,
lci_reg = sum_reg_fit$lci,
uci_fast = sum_fast_fit$uci,
uci_reg = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
curves = list(mean_fast = sum_fast_fit$mean,
mean_reg = sum_reg_fit$mean,
lci_fast = sum_fast_fit$lci,
lci_reg = sum_reg_fit$lci,
uci_fast = sum_fast_fit$uci,
uci_reg = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
curves = list(a_mean_fast = sum_fast_fit$mean,
b_mean_reg = sum_reg_fit$mean,
c_lci_fast = sum_fast_fit$lci,
d_lci_reg = sum_reg_fit$lci,
e_uci_fast = sum_fast_fit$uci,
f_uci_reg = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(3,2))
GP.plot.curves(curves,layout=c(2,3))
library(BayesGPfit)
curves = list(mean_fast = sum_fast_fit$mean,
mean_reg = sum_reg_fit$mean,
lci_fast = sum_fast_fit$lci,
lci_reg = sum_reg_fit$lci,
uci_fast = sum_fast_fit$uci,
uci_reg = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(2,3))
curves = list(mean_fast = sum_fast_fit$mean,
mean = sum_reg_fit$mean,
lci_fast = sum_fast_fit$lci,
lci = sum_reg_fit$lci,
uci_fast = sum_fast_fit$uci,
uci = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(2,3))
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves)
GP.plot.curves(curves,layout=c(3,1))
library(BayesGPfit)
library(lattice)
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,layout=c(3,1))
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
dat$x = GP.generate.grids(d=1,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,layout=c(3,1))
GP.plot.curves(curves)
warnings()
GP.plot.curves(curves)
dat$x = GP.generate.grids(d=1,num_grids = 1000)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves)
GP.plot.curves(curves,type="l")
GP.plot.curves(curves,type="l",lwd=2)
library(BayesGPfit)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,type="l",lwd=2)
GP.plot.curves(curves,type="l",lwd=2,cols=c("blue","red"))
GP.plot.curves(curves,type="l",lwd=2,cols=c("blue","red"))
library(BayesGPfit)
GP.plot.curves(curves,type="l",lwd=2,cols=c("blue","red"))
GP.plot.curves(curves,type="l",lwd=2,cols=c("black","blue","red"))
library(BayesGPfit)
GP.plot.curves(curves,type="l",lwd=2,cols=c("black","blue","red"))
?plot
?legend
library(BayesGPfit)
GP.plot.curves(curves,cols=c("black","blue","red"))
##plot 3D curve
x3d = GP.generate.grids(d=3,num_grids = 50)
curve3d = GP.simulate.curve.fast(x3d,a=0.01,b=0.5,
poly_degree=10L)
GP.plot.curve(curve3d,main="Simulated 3D Curve",
xlab =  "x", ylab = "y", zlab = "z",
num_slices=10,zlim=c(-0.5,0.5))
library(BayesGPfit)
library(BayesGPfit)
GP.plot.curve(curve,main="Simulated 2D Curve")
curve3d = GP.simulate.curve.fast(x3d,a=0.01,b=0.5,
poly_degree=10L)
GP.plot.curve(curve3d,main="Simulated 3D Curve",
xlab =  "x", ylab = "y", zlab = "z",
num_slices=10,zlim=c(-0.5,0.5))
GP.plot.curves(curves,cols=c("black","blue","red"),main="Comparisons of Bayesian model fitting")
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
# plot(GP.plot.curve(curve,main="True curve"),split=c(1,2,2,2),more=TRUE)
# plot(GP.plot.curve(fast_fit,main="Posterior mean estimates (fast)"),split=c(2,2,2,2),more=TRUE)
# plot(GP.plot.curve(reg_fit,main="Posterior mean estimates (Regular)"),split=c(2,1,2,2))
#
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,cols=c("black","blue","red"),
main="Comparisons of Bayesian model fitting")
library(BayesGPfit)
library(BayesGPfit)
library(lattice)
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=1L,num_grids = 1000)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,cols=c("black","blue","red"),
main="Comparisons of Bayesian model fitting")
library(BayesGPfit)
library(BayesGPfit)
library(lattice)
set.seed(1227)
dat = list()
dat$x = GP.generate.grids(d=2L,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
curves = list(True = curve,
Bayes_fast = fast_fit,
Bayes = reg_fit)
GP.plot.curves(curves,
main="Comparisons of Bayesian model fitting")
library(BayesGPfit)
library(BayesGPfit)
library(lattice)
set.seed(1224)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
sum_fast_fit = GP.summary(fast_fit)
sum_reg_fit = GP.summary(reg_fit)
curves = list(mean_fast = sum_fast_fit$mean,
mean = sum_reg_fit$mean,
lci_fast = sum_fast_fit$lci,
lci = sum_reg_fit$lci,
uci_fast = sum_fast_fit$uci,
uci = sum_reg_fit$uci)
GP.plot.curves(curves,layout=c(2,3))
?predict
library(BayesGPfit)
?GP.generate.grids
GP.generate.grids
set.seed(1227)
dat = list()
set.seed(1227)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids = 50,random=TRUE)
testdat = list()
library(BayesGPfit)
set.seed(1227)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids = 50,random=TRUE)
testdat = list()
testdat$x = GP.generate.grids(d=2,num_grids = 100,random=FALSE)
curve = GP.simulate.curve.fast(rbind(traindat$x,testdat$x),a=0.01,b=0.5,poly_degree=20L)
test_curve = curve[nrow(traindat$x)+1:nrow(testdat$x)]
dim(curve)
names(curve)
set.seed(1227)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids = 50,random=TRUE)
testdat = list()
testdat$x = GP.generate.grids(d=2,num_grids = 100,random=FALSE)
curve = GP.simulate.curve.fast(rbind(traindat$x,testdat$x),a=0.01,b=0.5,poly_degree=20L)
train_curve = list(f=curve$f[1:nrow(traindat$x)],x=traindat$x)
test_curve = list(f=curve$f[nrow(traindat$x)+1:nrow(testdat$x)],x=testdat$x)
traindat$f = train_curve$f + rnorm(length(train_curv$f),sd=1)
testdat$f = test_curve$f + rnorm(length(test_curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
fast_pred = GP.predict(fast_fit,testdat$x,CI=TRUE)
reg_pred = GP.predict(reg_fit,testdat$x,CI=TRUE)
pmse = c(fast = mean((fast_pred$mean$f-test_curve$f)^2),
reg = mean((reg_pred$mean$f-test_curve$f)^2))
print(pmse)
traindat$f = train_curve$f + rnorm(length(train_curve$f),sd=1)
testdat$f = test_curve$f + rnorm(length(test_curve$f),sd=1)
set.seed(1227)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids = 50,random=TRUE)
testdat = list()
testdat$x = GP.generate.grids(d=2,num_grids = 100,random=FALSE)
curve = GP.simulate.curve.fast(rbind(traindat$x,testdat$x),a=0.01,b=0.5,poly_degree=20L)
train_curve = list(f=curve$f[1:nrow(traindat$x)],x=traindat$x)
test_curve = list(f=curve$f[nrow(traindat$x)+1:nrow(testdat$x)],x=testdat$x)
traindat$f = train_curve$f + rnorm(length(train_curve$f),sd=1)
testdat$f = test_curve$f + rnorm(length(test_curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
fast_pred = GP.predict(fast_fit,testdat$x,CI=TRUE)
reg_pred = GP.predict(reg_fit,testdat$x,CI=TRUE)
pmse = c(fast = mean((fast_pred$mean$f-test_curve$f)^2),
reg = mean((reg_pred$mean$f-test_curve$f)^2))
print(pmse)
curves = list(true = test_curve,
Bayes = reg_pred$mean,
fast = fast_pred$mean)
GP.plot.curves(curves)
set.seed(1227)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids = 100,random=TRUE)
testdat = list()
testdat$x = GP.generate.grids(d=2,num_grids = 100,random=FALSE)
curve = GP.simulate.curve.fast(rbind(traindat$x,testdat$x),a=0.01,b=0.5,poly_degree=20L)
train_curve = list(f=curve$f[1:nrow(traindat$x)],x=traindat$x)
test_curve = list(f=curve$f[nrow(traindat$x)+1:nrow(testdat$x)],x=testdat$x)
traindat$f = train_curve$f + rnorm(length(train_curve$f),sd=1)
testdat$f = test_curve$f + rnorm(length(test_curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
fast_pred = GP.predict(fast_fit,testdat$x,CI=TRUE)
reg_pred = GP.predict(reg_fit,testdat$x,CI=TRUE)
pmse = c(fast = mean((fast_pred$mean$f-test_curve$f)^2),
reg = mean((reg_pred$mean$f-test_curve$f)^2))
print(pmse)
curves = list(true = test_curve,
Bayes = reg_pred$mean,
fast = fast_pred$mean)
GP.plot.curves(curves)
set.seed(1224)
traindat = list()
traindat$x = GP.generate.grids(d=2,num_grids=100,random=TRUE)
testdat = list()
testdat$x = GP.generate.grids(d=2,num_grids=100,random=FALSE)
curve = GP.simulate.curve.fast(rbind(traindat$x,testdat$x),a=0.01,b=0.5,poly_degree=20L)
train_curve = list(f=curve$f[1:nrow(traindat$x)],x=traindat$x)
test_curve = list(f=curve$f[nrow(traindat$x)+1:nrow(testdat$x)],x=testdat$x)
traindat$f = train_curve$f + rnorm(length(train_curve$f),sd=1)
testdat$f = test_curve$f + rnorm(length(test_curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(traindat$f,traindat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
fast_pred = GP.predict(fast_fit,testdat$x,CI=TRUE)
reg_pred = GP.predict(reg_fit,testdat$x,CI=TRUE)
pmse = c(fast = mean((fast_pred$mean$f-test_curve$f)^2),
reg = mean((reg_pred$mean$f-test_curve$f)^2))
print(pmse)
curves = list(true = test_curve,
Bayes = reg_pred$mean,
fast = fast_pred$mean)
GP.plot.curves(curves)
library(BayesGPfit)
source('~/Dropbox/Umich/People/jiankang/Rlib/BayesGPfit/R/fastGPfit.R')
rm(list=ls(all=TRUE))
library(BayesGPfit)
library(BayesGPfit)
library(BayesGPfit)
Lambda = GP.eigen.value(poly_degree=10L,a=0.01,b=0.5,d=2)
plot(Lambda)
barplot(Lambda)
source('~/Dropbox/Umich/People/jiankang/Rlib/BayesGPfit/R/fastGPfit.R')
rm(list=ls(all=TRUE))
library(BayesGPfit)
library(BayesGPfit)
?GP.generate.grids
grids = GP.generate.grids(d=3L)
std_grids = GP.std.grids(grids)
plot(grids[,1],std_grids[,1])
grids = GP.generate.grids(d=2L)
std_grids = GP.std.grids(grids)
plot(grids[,1],std_grids[,1],asp=1)
abline(a=0,b=1,lty=1)
abline(a=0,b=1,lty=2)
plot(grids[,1],std_grids[,1],asp=1,type="l")
abline(a=0,b=1,lty=2)
library(BayesGPfit)
file.exists("~/.ssh/id_rsa.pub")
library(devtools)
library(BayesGPfit)
?GP.eigen.funcs.fast
devtools::install_github("kangjian2016/BayesGPfit")
library(BayesGPfit)
library(BayesGPfit)
GP.simulate.curve.fast()
?GP.simulate.curve.fast
?GP.Bayes.fit
library(lattice)
set.seed(1224)
dat = list()
dat$x = GP.generate.grids(d=2,num_grids = 100)
curve = GP.simulate.curve.fast(dat$x,a=0.01,b=0.5,poly_degree=20L)
GP.plot.curve(curve,main="Simulated Curve")
dat$f = curve$f + rnorm(length(curve$f),sd=1)
fast_fit = GP.fast.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
reg_fit = GP.Bayes.fit(dat$f,dat$x,a=0.01,b=0.5,poly_degree=20L,progress_bar = TRUE)
mse = c(reg = mean((reg_fit$f - curve$f)^2),
fast = mean((fast_fit$f - curve$f)^2))
print(mse)
setwd("~/Dropbox/Umich/People/PeterSong/iCopula/CF_Rcode")
ls
ls()
