#Brain Image lib
Rlibpath = "/Users/jiankang/Dropbox/Umich/People/jiankang/Rlib"
library(cifti)
library(gifti)
library(xml2)
source(file.path(Rlibpath,"figure_lib.R"))
fsldatpath = "//usr/local/fsl/data/standard"



extract_nii_xyz = function(nii_img){
  ijk = as.matrix(expand.grid(1:nii_img@dim_[2],1:nii_img@dim_[3],1:nii_img@dim_[4]))
  mat = rbind(nii_img@srow_x,nii_img@srow_y,nii_img@srow_z)
  return(cbind(ijk,1)%*%t(mat[1:3,]))
}


avg152T1_gray=readANALYZE(file.path(fsldatpath,"tissuepriors/avg152T1_gray"))
MNI2mm_struc = readNIfTI(file.path(fsldatpath,"MNI152_T1_2mm_strucseg.nii.gz"))
MNI2mm_mask = readNIfTI(file.path(fsldatpath,"MNI152_T1_2mm_brain_mask.nii.gz"))
MNI2mm_brain = readNIfTI(file.path(fsldatpath,"MNI152_T1_2mm.nii.gz"))
MNI2mm_brain = ifelse(MNI2mm_mask==1,MNI2mm_brain,0)
MNI2mm_xyz = extract_nii_xyz(MNI2mm_brain)


vol2MNI = function(volIdx, mat) {
  return(cbind(volIdx, 1) %*% t(mat[1:3, ]))
}

simple_read_cifti = function(filename) {
  dat_cifti = read_cifti(filename)
  
  #extract data from left hemisphere
  L_cortex = matrix(
    NA,
    nrow = attr(dat_cifti$BrainModel[[1]],
                "SurfaceNumberOfVertices"),
    ncol = ncol(dat_cifti$data)
  )
  L_cortex[dat_cifti$BrainModel[[1]] + 1, ] = dat_cifti$data[1:length(dat_cifti$BrainModel[[1]]), ]
  
  #extract data from right hemisphere
  R_cortex = matrix(
    NA,
    nrow = attr(dat_cifti$BrainModel[[2]],
                "SurfaceNumberOfVertices"),
    ncol = ncol(dat_cifti$data)
  )
  R_cortex[dat_cifti$BrainModel[[2]] + 1, ] = dat_cifti$data[length(dat_cifti$BrainModel[[1]]) +
                                                               1:length(dat_cifti$BrainModel[[2]]), ]
  
  
  #extract data from 19 ROI volume
  
  
  
  nodes = matrix_ind_map_nodes(filename)
  nodeset = xml_find_all(nodes, "./BrainModel")
  region_names = xml_attr(nodeset, "BrainStructure")[-c(1:2)]
  indexOffset = as.numeric(xml_attr(nodeset, "IndexOffset")[-c(1:2)])
  indexCount = as.numeric(xml_attr(nodeset, "IndexCount")[-c(1:2)])
  ROI_vol = list()
  for (k in 1:length(region_names)) {
    region = region_names[k]
    ROI_vol[[region]] = list()
    ROI_vol[[region]]$dat = dat_cifti$data[indexOffset[k] + 1:indexCount[k], ]
    ROI_vol[[region]]$MNIcoords = vol2MNI(as.matrix(dat_cifti$BrainModel[[2 +
                                                                            k]]), dat_cifti$Volume$mat)
  }
  return(list(
    ROI_vol = ROI_vol,
    L_cortex = L_cortex,
    R_cortex = R_cortex
  ))
}

xyz_match = function(xyz_1, xyz_2){
  hash_1 = 10^6*xyz_1[,1]+10^3*xyz_1[,2]+xyz_1[,3]
  hash_2 = 10^6*xyz_2[,1]+10^3*xyz_2[,2]+xyz_2[,3]
  return(match(hash_1,hash_2))
}

show_ROI_vol = function(ROI_vol,roi,colidx,xyz=MNI2mm_xyz,brain=MNI2mm_brain
                        ,zlist=NULL,layout=NULL){
  #fromto=range(ROI_vol[[roi]]$MNIcoords[,3])
  coords = NULL
  dat = NULL
  for(k in 1:length(roi)){
    coords = rbind(coords,ROI_vol[[roi[k]]]$MNIcoords)
    dat = c(dat,ROI_vol[[roi[k]]]$dat[,colidx])
  }
  
  if(is.null(zlist)){
    tab = table(coords[,3])
    z_max=as.numeric(names(tab)[which.max(tab)])
    zlist = c(z_max-2,z_max,z_max+2)
  }
  loc=xyz_match(coords,xyz)
  img = rep(NA,length=nrow(xyz))
  loc = loc[!is.na(loc)]
  img[loc] = dat
  show.image.axial(img,all_coords=xyz,zlist=zlist,brain=brain,layout=layout)
}

